# This file is based on the PALISASE Makefile
# Multi OS makefile (No Windows)

UNAME_S := $(shell uname -s)
HOST_SYSTEM = $(shell uname | cut -f 1 -d_)
SYSTEM ?= $(HOST_SYSTEM)

CPPSTD := -std=c++14 -fPIC
CC := g++ $(CPPSTD)

ifeq ($(SYSTEM),Darwin)
LIBSUFFIX := .dylib
LIBCMD := -dynamiclib -undefined suppress -flat_namespace
COMPTHREADFLAG :=
LOADTHREADFLAG :=
else
LIBSUFFIX := .so
# LIBCMD := -fPIC 
LIBCMD := -shared -Wl,--export-dynamic,-z,defs
COMPTHREADFLAG := -pthread
LOADTHREADFLAG := -pthread
endif

RDYNAMIC := -rdynamic

# COMPTHREADFLAG := -pthread
# LOADTHREADFLAG := -pthread

# LDFLAGS += -lboost_system -lboost_thread -fsanitize=address
LDFLAGS += -lboost_system -lboost_thread

BOOST_LD_PATH := -Lboost/stage/lib

#main best performance configuration for parallel operation - cross-platform
# CPPFLAGS += -maes -msse4 -g -Wall -Werror -fsanitize=address $(COMPTHREADFLAG) ##undefine for parallel best performance operation with debug
# CPPFLAGS +=  -maes -msse4 -g -O3 -Wall -Werror -Wshadow-compatible-local -fno-omit-frame-pointer $(COMPTHREADFLAG) ##undefine for parallel best performance operation with debug
CPPFLAGS +=  -maes -msse4 -g -O3 -Wall -Werror -fno-omit-frame-pointer $(COMPTHREADFLAG) ##undefine for parallel best performance operation with debug

TEST_LIB := $(LOADTHREADFLAG)

#build and bin directory
BUILDDIR := build
BINDIR := bin

#cryptoTools locations
# MIRACL_LIBDIR := third_party/cryptoTools/thirdparty/linux/miracl/miracl/source
# MIRACL_INCDIR := third_party/cryptoTools/thirdparty/linux/miracl
# LIBCMD += -L$(MIRACL_LIBDIR)

# BOOST_LIBDIR := third_party/cryptoTools/thirdparty/linux/boost/boost
# BOOST_INCDIR := third_party/cryptoTools/thirdparty/linux/boost
# LIBCMD += -L$(BOOST_LIBDIR)

# BOOST_LIBDIR := third_party/boost/boost
# BOOST_INCDIR := third_party/boost
# LIBCMD += -L$(BOOST_LIBDIR)

BOOST_LIBDIR := boost/boost
BOOST_INCDIR := boost
LIBCMD += -L$(BOOST_LIBDIR)

# LIBCMD += -L./
# LIBCMD += -Lboost/stage/lib

LIBCMD += $(BOOST_LD_PATH)

# CT_LIBDIR := third_party/cryptoTools/lib
# CT_INCDIR := third_party/cryptoTools
# LIBCMD += -L$(CT_LIBDIR)

#LDFLAGS += -lmiracl -lcryptoTools

#sources folders
EXTLIBDIR := bin/lib
EXTTESTDIR := bin/unittest
EXTDEMODIR := bin/demo

# extentions for source and header files
SRCEXT := cpp
HDREXT := h

$(objects) : %.o : %.cpp

# External libraries
#EXTLIB := -L$(EXTLIBDIR) $(TEST_LIB) -pg ## include profiling
EXTLIB := -L$(EXTLIBDIR) $(TEST_LIB) ## no-profiling

# INC := -I src/lib -I test -I $(CT_INCDIR) -I $(MIRACL_INCDIR) -I $(BOOST_INCDIR) 
# INC := -I src/lib -I test -I $(CT_INCDIR) -I $(BOOST_INCDIR) 
INC := -I src/lib -I test -I $(BOOST_INCDIR) 

#the name of the shared object library
CORELIB := libgazelle$(LIBSUFFIX)

# run make for all components. you can run any individual component separately
#  by invoking   "make alltargets"  for example
# each corresponding makefile will make the allxxxx target
all: allcore

alldemos: allcoredemos

testall: testcore

debug: CXXFLAGS += -DDEBUG -g
debug: CCFLAGS += -DDEBUG -g

# clean up all components. you can clean any individual compoenent separately
#  by invoking   "make cleantargets"  for example
# each corresponding makefile will make the cleanxxxx target
.PHONEY: clean
clean: cleancore
	@echo 'Cleaning top level autogenerated directories'
	$(RM) -f test/include/gtest/gtest-all.o
	$(RM) -rf bin

include Makefile.src

test/include/gtest/gtest-all.o: test/include/gtest/gtest-all.cc
	$(CC) -c $(CPPFLAGS) -o $@ $<
